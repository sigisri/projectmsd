module AarumessMapping4;
  logic cpu_clk = 1'b0;
  logic dimm_clk = 1'b0;
  initial forever #2.0833ns cpu_clk = ~cpu_clk;  // initializing cpu and dimm clocks
  initial forever #4.1667ns dimm_clk = ~dimm_clk;

  int cpu_counter, dimm_counter;      
parameter trcd=39; //creating the timing parameters
parameter trp=39;
parameter tcl=40;
parameter tbrust=8;
int tempbg=50,tempb=50;
int t1=0,t11=0,t2=0,t21=0,t3=0;
  typedef struct packed {      //creating the sturcture to be assigned to the array
    longint time1;
    int core;
    int operation;
    bit [35:0] address;
    bit [1:0] byte_select;
    bit [3:0] column1;
    bit [0:0] channel;
    bit [2:0] bank_group;
    bit [1:0] bank;
    bit [5:0] column2;
    bit [15:0] row;
  } MyStruct;
  MyStruct myArray[16]; initializing the array
MyStruct temp; initializing the temp structure which stores the respective values
  int arrayIndex = 0; //initialiing the size of the array, number of elements in the array at a particular instance
  int var1, newf; 
  string var2;
  int i;
  initial begin
    if ($value$plusargs("%s", var2))     //taking filename as input from the user as string 
      $display("%s", var2);
    else
      var2 = "tracecp2.txt"; //if no value is given, default value is taken

    var1 = $fopen(var2, "r");   opening the file in read mode
    newf = $fopen("trace_out.txt", "w");    // creating the new file, to write the output into the file

    if (!var1)
      $fatal("Could not open file: %s", var2);

    // Read data from the file into the array of structures
    while (!$feof(var1)) begin  //loop runs till end of file
     @(posedge cpu_clk) begin     
         
        if (arrayIndex < 16) begin    //if the array size is less than 16, it pushes a new element into the array
$fscanf(var1, "%0d %0d %0d %h", temp.time1, temp.core, temp.operation, temp.address);   //after reading each line from the file, storing it in temp structure
        temp.byte_select = temp.address[1:0];
        temp.column1 = temp.address[5:2];
        temp.channel = temp.address[6:6];
        temp.bank_group = temp.address[9:7];
        temp.bank = temp.address[11:10];
        temp.column2 = temp.address[17:12];
        temp.row = temp.address[33:18];  
           myArray[arrayIndex] = temp;  //assigning the temp structure to the array
          cpu_counter = cpu_counter + 1;  
          arrayIndex = arrayIndex + 1;    //incrementing the array size, after pushing a new element into the array
        end
        else begin
          repeat (arrayIndex < 16) @(posedge cpu_clk);    //if the array size is equal to 16, cpu clk waits till the array size is less than 16
        end
      end
    end
    $fclose(var1);   //closing the file
  end

always@(posedge dimm_clk) begin
if(arrayIndex!=0) begin   //if array size is notequal to 0, it uses the first element insie the array 
dimm_counter=dimm_counter+1;
$display("Entry %0d,Address Info - Byte Select: %0d, Column1: %0d, Channel: %0d, Bank Group: %0d, Bank: %0d, Column2: %0d, Row: %0d",2*dimm_counter,
          myArray[0].byte_select,myArray[0].column1,myArray[0].channel,myArray[0].bank_group,myArray[0].bank,myArray[0].column2,myArray[0].row);
if(tempbg==myArray[0].bank_group&&tempb==myArray[0].bank) begin    //if bank group and bank are same for temp and the instruction we are using, it enters this loop 
t1=t3+1+trp; //performing necessary calculations, if bank and bank gropup are same
t11=t1+1;
t2=t1+trcd;
t21=t2+1;
t3=t21+tcl+tbrust;

`ifdef DEBUG;  //using debug statement to print only if the user wants

case(myArray[0].operation)   // using case statement to check for the operation we are performing, if is 0 we are reading, 1 we are writing, and 2 if we are doing an instruction fetch
	0 : begin repeat (trp) @(posedge dimm_clk);
		  $fdisplay(newf,"%d act0 %h %h %h",2*t1,myArray[0].bank_group,myArray[0].bank,myArray[0].row);
		  repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d act1 %h %h %h",2*t11,myArray[0].bank_group,myArray[0].bank,myArray[0].row);
		  repeat (trcd) @(posedge dimm_clk);
	          $fdisplay(newf,"%d rd0 %h %h %h",2*t2,myArray[0].bank_group,myArray[0].bank,myArray[0].column2);
		  repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d rd1 %h %h %h",2*t21,myArray[0].bank_group,myArray[0].bank,myArray[0].column2);
		  repeat (tcl) @(posedge dimm_clk);
		  $fdisplay(newf,"%d pre %h %h",2*t3,myArray[0].bank_group,myArray[0].bank);
    	    end
	1 : begin repeat (trp) @(posedge dimm_clk);
		  $fdisplay(newf,"%d act0 %h %h %h",2*t1,myArray[0].bank_group,myArray[0].bank,myArray[0].row);
		  repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d act1 %h %h %h",2*t11,myArray[0].bank_group,myArray[0].bank,myArray[0].row);
		  repeat (trcd) @(posedge dimm_clk);
	          $fdisplay(newf,"%d wr0 %h %h %h",2*t2,myArray[0].bank_group,myArray[0].bank,myArray[0].column2);
		  repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d wr1 %h %h %h",2*t21,myArray[0].bank_group,myArray[0].bank,myArray[0].column2);
		  repeat (tcl) @(posedge dimm_clk);
		  $fdisplay(newf,"%d pre %h %h",2*t3,myArray[0].bank_group,myArray[0].bank);
    	    end 
	2 : begin repeat (trp) @(posedge dimm_clk);
		  $fdisplay(newf,"%d act0 %h %h %h",2*t1,myArray[0].bank_group,myArray[0].bank,myArray[0].row);
		  repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d act1 %h %h %h",2*t11,myArray[0].bank_group,myArray[0].bank,myArray[0].row);
		  repeat (trcd) @(posedge dimm_clk);
	          $fdisplay(newf,"%d rd0 %h %h %h",2*t2,myArray[0].bank_group,myArray[0].bank,myArray[0].column2);
		  repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d rd1 %h %h %h",2*t21,myArray[0].bank_group,myArray[0].bank,myArray[0].column2);
		  repeat (tcl) @(posedge dimm_clk);
		  $fdisplay(newf,"%d pre %h %h",2*t3,myArray[0].bank_group,myArray[0].bank);
    	    end
	default $display("enter correct operation"); //if any instruction has operation other than 0,1 and 2, this will printed
endcase
`endif 
end
else begin //if bank and bankgroup are different
t1=t3+1;
t11=t1+1;
t2=t1+trcd;
t21=t2+1;
t3=t21+tcl+tbrust;
`ifdef DEBUG;
	case(myArray[0].operation)
	0 : begin repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d act0 %h %h %h",2*t1,myArray[0].bank_group,myArray[0].bank,myArray[0].row);
		  repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d act1 %h %h %h",2*t11,myArray[0].bank_group,myArray[0].bank,myArray[0].row);
		  repeat (trcd) @(posedge dimm_clk);
	          $fdisplay(newf,"%d rd0 %h %h %h",2*t2,myArray[0].bank_group,myArray[0].bank,myArray[0].column2);
		  repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d rd1 %h %h %h",2*t21,myArray[0].bank_group,myArray[0].bank,myArray[0].column2);
		  repeat (tcl) @(posedge dimm_clk);
		  $fdisplay(newf,"%d pre %h %h",2*t3,myArray[0].bank_group,myArray[0].bank);
    	    end
	1 : begin repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d act0 %h %h %h",2*t1,myArray[0].bank_group,myArray[0].bank,myArray[0].row);
		  repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d act1 %h %h %h",2*t11,myArray[0].bank_group,myArray[0].bank,myArray[0].row);
		  repeat (trcd) @(posedge dimm_clk);
	          $fdisplay(newf,"%d wr0 %h %h %h",2*t2,myArray[0].bank_group,myArray[0].bank,myArray[0].column2);
		  repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d wr1 %h %h %h",2*t21,myArray[0].bank_group,myArray[0].bank,myArray[0].column2);
		  repeat (tcl) @(posedge dimm_clk);
		  $fdisplay(newf,"%d pre %h %h",2*t3,myArray[0].bank_group,myArray[0].bank);
    	    end 
	2 : begin repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d act0 %h %h %h",2*t1,myArray[0].bank_group,myArray[0].bank,myArray[0].row);
		  repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d act1 %h %h %h",2*t11,myArray[0].bank_group,myArray[0].bank,myArray[0].row);
		  repeat (trcd) @(posedge dimm_clk);
	          $fdisplay(newf,"%d rd0 %h %h %h",2*t2,myArray[0].bank_group,myArray[0].bank,myArray[0].column2);
		  repeat (2) @(posedge dimm_clk);
		  $fdisplay(newf,"%d rd1 %h %h %h",2*t21,myArray[0].bank_group,myArray[0].bank,myArray[0].column2);
		  repeat (tcl) @(posedge dimm_clk);
		  $fdisplay(newf,"%d pre %h %h",2*t3,myArray[0].bank_group,myArray[0].bank);
    	    end
	default $display("enter correct operation");
endcase
`endif
tempbg=myArray[0].bank_group;  //storing the bank and bank group in temporary variable so that it will be used to check for the next instruction
tempb=myArray[0].bank;
end
 for (i = 0; i < arrayIndex - 1; i = i + 1) begin //perorming the left shift so that the first element in the array will be deleted and second insruction will become first instruction
        myArray[i] = myArray[i + 1];
      end
      arrayIndex = arrayIndex - 1; decreasing the size of array, so that we can push another instruction into the array
end
end
always@(posedge dimm_clk) begin
dimm_counter=dimm_counter+1; //to have sync between counter and respective clocks
end
always@(posedge cpu_clk) begin
cpu_counter=cpu_counter+1;
end
endmodule
